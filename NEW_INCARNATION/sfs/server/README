#! /bin/bash

TO_EXCLUDE_ENTRIES=(
	/var/lib/{rpcbind,nfs,dhcpcd,transmission,mlocate,systemd,docker}
	/var/cache/{minidlna,ldconfig,pacman/pkg/}
	/var/log
	/root/{.kodi,.new_kodi,.cargo}
	/etc/{ld.so.cache}
)

RELEASE_N=1	# 2020/06/08
RELEASE_N=2	# 2020/06/09
RELEASE_N=3	# 2020/06/09
RELEASE_N=4	# 2020/10/27
RELEASE_N=5	# 2020/11/01
RELEASE_N=6	# 2020/11/03
RELEASE_N=7	# 2020/11/05
RELEASE_N=8	# 2020/12/30
RELEASE_N=9	# 2021/01/03
RELEASE_N=10	# 2021/01/10
RELEASE_N=11	# 2021/01/10
RELEASE_N=12	# 2021/01/16
RELEASE_N=13	# 2021/02/06
RELEASE_N=14	# 2021/03/07
RELEASE_N=15	# 2021/07/11
RELEASE_N=16	# 2021/10/05
RELEASE_N=17	# 2021/11/06
RELEASE_N=18	# 2021/12/13
RELEASE_N=19	# 2022/01/14
RELEASE_N=20	# 2022/02/23
RELEASE_N=21	# 2022/03/11
RELEASE_N=22	# 2022/04/20


touch start

# /boot
tar -chv --exclude="grub" /boot | xz -1vv >x64_server_boot_r${RELEASE_N}.tar.xz
touch finish_boot

# generate the new sfs
block="1024k"; mksquashfs README /etc /root /opt /var /usr "./x64_server_sfs_${block}_r${RELEASE_N}.sfs" -always-use-fragments -comp xz -b ${block} -Xdict-size ${block} -progress -ef <(for i in ${TO_EXCLUDE_ENTRIES[@]}; do echo $i; done) #  2>&1 | tee mksquashfs.out
touch finish_sfs

# temporarily backup /
umount -l /tmp/root
mkdir -p /tmp/root
mount --bind / /tmp/root
tar -cv -C /tmp/root etc/ /etc/ sfs/home_update* /root/ | xz -9vv >x64_server_homes_r${RELEASE_N}.tar.xz
touch finish_root
umount /tmp/root

ln -f x64_server_sfs_${block}_r${RELEASE_N}.sfs x64_server_sfs_r${RELEASE_N}.sfs
ls -l

# publish
rsync -Pa --inplace README x64_server_boot_r${RELEASE_N}.tar.xz x64_server_homes_r${RELEASE_N}.tar.xz x64_server_sfs_r${RELEASE_N}.sfs mutuatec@mutuatech.com:/home/mutuatec/mutuatech.com/linux/download

touch finish_rsync

return || exit 0

# on the first setup,

mkdir -p /rw/{etc,opt,usr,root,home,var}
mkdir -p /work/{etc,opt,usr,root,home,var}
mkdir -p /sfs/{etc,opt,usr,root,home,var}

: /etc/fstab.initcpio.script 
#!/usr/bin/ash

msg "waiting a little so devices needed to boot may have the time to turn up and be recognized by initramfs' udev before fstab is processed"
sleep 5
msg "done waiting. Devices should have already been recognized and we (may) be able to boot. If this is not the case, increase the sleep time"


: /etc/fstab.initcpio
# keep this file in sync with /rw/etc/fstab

# SFS mount points that will be rewritable
/new_root/sfs/sfs.sfs                           /new_root/sfs/        squashfs    defaults                               0       2
/dev/mmcblk0p1                                  /new_root/boot        vfat        defaults                               0       2

# overlays to allow writable SFSes
overlay                                         /new_root/usr            overlay         x-systemd.requires=/new_root/sfs/sfs.sfs,upperdir=/new_root/rw/usr,lowerdir=/new_root/sfs/usr,workdir=/new_root/work/usr 0 0
overlay                                         /new_root/opt            overlay         x-systemd.requires=/new_root/sfs/sfs.sfs,upperdir=/new_root/rw/opt,lowerdir=/new_root/sfs/opt,workdir=/new_root/work/opt 0 0
overlay                                         /new_root/var            overlay         x-systemd.requires=/new_root/sfs/sfs.sfs,upperdir=/new_root/rw/var,lowerdir=/new_root/sfs/var,workdir=/new_root/work/var 0 0
overlay                                         /new_root/etc            overlay         x-systemd.requires=/new_root/sfs/sfs.sfs,upperdir=/new_root/rw/etc,lowerdir=/new_root/sfs/etc,workdir=/new_root/work/etc 0 0
overlay                                         /new_root/root           overlay         x-systemd.requires=/new_root/sfs/sfs.sfs,upperdir=/new_root/rw/root,lowerdir=/new_root/sfs/root,workdir=/new_root/work/root 0 0
overlay                                         /new_root/home           overlay         x-systemd.requires=/new_root/sfs/sfs.sfs,upperdir=/new_root/rw/home,lowerdir=/new_root/sfs/home,workdir=/new_root/work/home 0 0

