*this document was built before the packages were introduced -- they attempt to do what the packages does*
*out of this, pre and post installation documents should be derived*

# Desktop

The following instructions apply to KDE Dr460nized Gaming edition:

1. Inatall selecting manual partitioning -- add a swap partition (otherwise it won't be added). Resume boot param is properly set this way
2. Garuda boot options: disable CPU mitigations, enable SysRq
3. Tweak /etc/fstab with compress=zstd:7,commit=600,discard=async,ssd and comment out the tmpfs for /tmp + systemctl mask tmp.mount
4. Reboot and recompress all files: btrfs filesystem defragment -r -v -czstd /
5. Install custom packages served by repositories (this command may be useful for determining new additions to this list "pacman -Qen | sed 's| .*||'"): pacman -S --needed arp-scan base-devel clang cmake compsize cpupower-gui docker ffmpeg-full fluxctl freeplane gcompris-qt gephi gimp gnuplot google-chrome hugo i7z inkscape intellij-idea-ultimate-edition iotop jdk jwm libreoffice-fresh mingw-w64 pavucontrol rlottie-git rustup screen scribus smartgit speedcrunch stellarium testdisk tigervnc time transmission-remote-gtk valgrind gvim virtualbox xterm zoom  sublime-text-4 icaclient hunspell-pt-br google-earth-pro genymotion evdi displaylink deadbeef bitwig-studio android-studio skypeforlinux-stable-bin visual-studio-code-bin  android-tools ardour aspell-en aspell-pt audacity blender calibre darktable dbeaver ddrescue electron fdkaac fdupes flameshot geeqie ghidra gkrellm gparted gsmartcontrol handbrake hashcat hunspell-en_us jq kazam krita kubectl l3afpad lighttpd mupdf nvidia-dkms nvidia-settings openshot qcad qtcreator rawtherapee rdesktop redis scrot sox squashfs-tools strace wireshark-qt wmctrl xarchiver xdiskusage xdot yt-dlp printer-support gource gperf grpc-cli nvidia-dkms nvidia-settings obsidian ttf-mac-fonts
6. Install additional AUR packages not present in AUR (pacman -Qe --foreign | sed 's| .*||'): paru -S --needed angular-cli celestia dbvis evcxr_repl ganttproject hamsket-bin jdk11 jre11 kafka presto-cli projectlibre pulse-secure xmacro  astah-community ddd dia-git editix-free epsonscan2 epsonscan2-non-free-plugin fotoxx freefilesync-bin gdmap httpstat-go jmeter modelio-bin proguard rstudio-desktop-bin skypeforlinux-stable-bin soapui sweethome3d-furniture-library treesheets-git ttf-ms-win10-auto tuxguitar tuxguitar-common visual-studio-code-bin xxdiff yed astah-uml kafka
7. Get any not currently available packages: rsync -Pa mutuatec@mutuatech.com:/home/mutuatec/mutuatech.com/linux/aur/{xmacro,jdk,jre,astah-community,*funfonts,ephifonts*}* .
8. Tweak other /etc files based on Mutuatech linux files to sync, giving special attention to /etc/groups (add the user to cups, vboxusers, wireshark, docker). Visudo to enable sudo without a password. Printer (copy /etc/cups/{ppd,printers.conf}). /etc/ssh/sshd_config: uncomment PermitRootLogin. Reboot.
9. Restore home directories
10. Install auto-boot scripts
11. Remove the, now wasteful, profile sync daemon service: pacman -Rdd profile-sync-daemon

Additionals:
a. If swap is not not on its own partition, a replacement for zram (RAM only) can be created with 'swapoff /swap; rm /swap; touch /swap; chattr +C /swap; fallocate -l $((1024*1024*512)) /swap; chmod 600 /swap; mkswap /swap; swapon /swap'.
b. Or simply use our latest & greatest `zram_writeback_daemon` for an optimized swapping experience. See /root/bin/PostBoot.local.example


# Server:

To be used with Garuda Hyprland Edition. Do as for Desktop installation, with the following exceptions:

3. zstd:15
4. pacman -S --needed  yt-dlp arp-scan base-devel clang cmake compsize iotop jwm rust screen testdisk tigervnc time xterm l3afpad lighttpd mupdf squashfs-tools strace wmctrl yt-dlp  vbetool minidlna transmission-cli fbset
5. paru -S --needed angular-cli xmacro httpstat-go wine-x64
9. restore home / mutua / ogre directories (including /operations)


-----------------------------------------------------------------------

Some useful commands for day-to-day operation:
=============================================

# Create some swap files in a BTRFS filesystem
for i in {1..10}; do swap=swap${i}; while date; do swapoff /$swap; rm /$swap; touch /$swap; chattr +C /$swap; fallocate -l $((1024*1024*512)) /$swap; chmod 600 /$swap; mkswap /$swap; swapon /$swap && break; sleep 1; done; done

# (preliminarly setup the machine after boot -- before the mutua packages are installed)
cd /proc/sys/vm/; echo 1 >swappiness; echo 95 >dirty_ratio; echo 60 >dirty_background_ratio; echo 60000 >dirty_writeback_centisecs; echo 60000 >dirty_expire_centisecs; echo 8 >page-cluster; echo 1 >/proc/sys/kernel/sysrq ; echo performance >/sys/module/pcie_aspm/parameters/policy; for p in /sys/devices/system/cpu/cpu[0-9]*/power/energy_perf_bias; do echo 0 >"$p"; done; for p in /sys/devices/system/cpu/cpu[0-9]*/cpufreq/scaling_governor; do echo performance >"$p"; done; for p in /sys/devices/system/cpu/cpu[0-9]*; do CPU=`basename $p`; MAX=`cat /sys/devices/system/cpu/$CPU/cpufreq/cpuinfo_max_freq`; echo $MAX >/sys/devices/systemcpu/$CPU/cpufreq/scaling_max_freq; done; # swapoff /dev/zram0 ; rmmod zram; swapon /swap1 /swap2 /swap3 /swap4 /swap5 /swap6 /swap7 /swap8 /swap9 /swap10; swapon -s


-----------------------------------------------------------------------

TO BE TURNED INTO A SCRIPT -- Make a bootable pendrive out of the current system:
================================================================================

1) Partition the pendrive and copy the EFI and Boot partitions
   DEV1=/dev/sdX3; DEV2=/dev/sdY
2) Format, create sub volumes, mount, add extra pendrive devices and balance
   umount /tmp/pen; mkdir -p /tmp/pen; mkfs.btrfs $DEV1 -f && mount -o noatime,compress=zstd:15,commit=600 $DEV1 /tmp/pen && for s in @{,home,root,srv,cache,log,tmp}; do btrfs subvolume create /tmp/pen/$s; done btrfs device add $DEV2 /tmp/pen; btrfs -v balance start /tmp/pen
3) Swap off any files (that would prevent creating read-only snapshots):
   swapoff -a
4) Prepare the snapshots to send to the pendrive -- removing any unwanted files
   btrfs -v subvolume snapshot / /.snapshots/to_send; rm -fr /.snapshots/to_send/root; rmdir /.snapshots/to_send{/home,/root,/srv,/var/cache,/var/log,/var/tmp}; for d in /{home,root,srv}; do btrfs -v subvolume snapshot ${d} /.snapshots/to_send/; done; for d in /var/{cache,log,tmp}; do btrfs -v subvolume snapshot ${d} /.snapshots/to_send/var/; done; rm -fr /.snapshots/to_send/{swap*,home/ana/,home/sfs,home/luiz/{.cargo,.rustup,tmp/images/,.local/share/waydroid*,Downloads/*},home/common/{.cargo,.rustup}} /.snapshots/to_send/usr/{lib/jvm/{java-8-openjdk,java-17-openjdk,java-21-openjdk},share/{waydroid-extra,supertuxkart}} /.snapshots/to_send/opt/{android-studio,ghidra,Citrix} /.snapshots/to_send/var/{lib/{waydroid,systemd/coredump/*},cache/pkgfile/*}; for d in /.snapshots/to_send{/home,/root,/srv,/var/{cache,log,tmp},}; do btrfs property set -ts ${d} ro true; done
6) Verify the required size is compatible with the pendrive:
   compsize -x /.snapshots/to_send/*
7) Copy:
   for s in {cache,log,tmp}/; do btrfs -v send -e --compressed-data /.snapshots/to_send/var/${s} | dd bs=$((4096*4096)) status=progress | btrfs -v receive /tmp/pen/; done; for s in {root,srv,home}/; do btrfs -v send -e --compressed-data /.snapshots/to_send/${s} | dd bs=$((4096*4096)) status=progress | btrfs -v receive /tmp/pen/; done; btrfs -v send -e --compressed-data /.snapshots/to_send/ | dd bs=$((4096*4096)) status=progress | btrfs -v receive /tmp/pen/
8) Remove the created snapshots (you may have to run it more than once):
   for d in /.snapshots/to_send{/home,/root,/srv,/var/{cache,log,tmp},}; do btrfs property set -ts ${d} ro false; btrfs -v subvolume delete ${d}; done
9) Make the pendrive's subvolumes writable:
   for d in /tmp/pen/*; do btrfs property set -f -ts $d ro false; done
10) Rename the pendrive's subvolumes
   for s in {home,root,srv,cache,log,tmp}; do mv /tmp/pen/$s /tmp/pen/@$s; done; mv /tmp/pen/to_send /tmp/pen/@
11) Adjust the UUID -- either by reusing the same UUID as the source filesystem or by editing /boot/grub/grub.cfg and /etc/fstab
12) Adjust the Host name and, possibly, change the local machine's ssh keygen
13) Done. Don't forget to umount and restore swap
