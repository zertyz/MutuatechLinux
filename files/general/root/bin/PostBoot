#! /bin/bash

# post boot script for server / desktop

################### PRELUDE #####################
script_base_dir=`dirname "$0"`
script_base_name=`basename "$0"`

# Log all outputs
exec 1<&-
exec 2<&-
exec 1>>/tmp/mutuatechlinux.services.log
exec 2>&1

# load config variables
script_config_file="${script_base_dir}/config"
. ${script_config_file} || (echo "####### `date`: ERROR in script '${script_base_name}': could not load config '${script_config_file}'. ABORTING SCRIPT"; exit)

#################################################


# set for performance or powersave depending on the power source in play
/home/common/bin/BackFromSuspension

echo "### `date`: 'PostBoot' script STARTED"

# In case the usual systemd services are disabled (they do for headless), we
# temporarily enable them to give the user the change to login after boot
if ((DESKTOP_MODE == 0)); then
	for s in systemd-journald systemd-udevd systemd-logind systemd-oomd getty@tty1 NetworkManager ModemManager avahi polkit dbus; do
		systemctl unmask $s
		systemctl start $s
	done
fi

echo "### `date`: Waiting 60s for all systemd services to load (user have the change to login and kill this script within 60 seconds)"
sleep 60
echo "### `date`: Done waiting. Continuing with PostBoot"

local_script="${script_base_dir}/${script_base_name}.local"
echo -en "`date`: Running local script '${local_script}', if present..."
[ -s ${local_script} ] && . ${local_script} && echo " OK" || echo " NOT PRESENT"

# Apply the power settings again, after all systemd services were loaded
/root/bin/BackFromSuspension

if ((DESKTOP_MODE==0)); then
	# disable interactive services
	for s in systemd-udevd systemd-logind getty@tty1 ModemManager NetworkManager systemd-oomd systemd-journald avahi polkit dbus; do
		systemctl mask $s
		systemctl stop $s
		pkill -f "$s"
	done
	for p in agetty 'systemd --user' dbus-daemon agetty; do pkill -f "$p"; done

	# fancy screen
	/usr/bin/fbset -g 1920 1080 1920 1080 16
	echo 0 > /sys/class/vtconsole/vtcon1/bind
	#fbi -autozoom -fitwidth -noverbose -t 5 -1 --vt 1 /root/wallpaper.jpg &>/dev/null
	fbi -autozoom -fitwidth -noverbose --vt 1 -d /dev/fb0 -t 5 -1 /root/wallpaper.jpg &>/dev/null
fi

# tune usb devices
eval `(find /sys -name 'max_sectors' -printf "echo 4096 >'%p';\n"; find /sys -name 'max_sectors_kb' -printf "echo $((4096/2)) >'%p';\n"
) | grep -E 'sd|usb'`

# SERVER-ONLY things
if ((SERVER_MODE > 0)); then

	# sshd
	systemctl start sshd
	
	if ((SERVER_MODE >= 2)); then

		# swap (servers don't use zswap, as long running services tends to have a lot of unused pages -- which we want to simply offload to the disk)
		echo N >/sys/module/zswap/parameters/enabled
		rmmod zram
	
		# hd never sleeps, for a long and healthy life
		##############################################
		hdparm -B 128 -M 128 /dev/sda

		# network without fancy services (with retries)
		###############################################
		for pk in lvmetad polkitd wpa_supplicant NetworkManager dhcpcd dhclient; do
			pkill $pk;
		done
		for i in {1..2}; do
			# wired network until proven otherwise
			ifconfig ${ETH} up
			sleep 1
			NETDEV=${ETH}

			if [ `cat /sys/class/net/${ETH}/carrier_up_count` -eq 0 ]; then
				# try wireless network if the cable is unplugged (if wirless does not work, it is probably due to the time it takes to detect the wireless hardware: a sleep may help)
				if ifconfig ${WLAN} up; then
					wpa_supplicant -B -c /etc/wpa_supplicant/wpa_supplicant.conf -i ${WLAN}
					sleep 3
					ifconfig ${ETH} down   # try to save a little power
					NETDEV=${WLAN}
				fi
			fi
			# get the IP
			dhcpcd -4p ${NETDEV} || dhclient ${NETDEV}
			# time set & network test
			sleep 3
			ntpdate br.pool.ntp.org && hwclock -w && break || sleep 16
		done    # network retries

		# clean some useless data to free some RAM (known to make keyboard and mouse stop working)
		if lsusb | grep '248a:8566'; then
		        echo "Service Keyboard / Mouse dongle detected. Not cleaning udev data..."
		else
		        rm -fr /run/udev/data/
		fi

	fi # internet / home server

	if ((SERVER_MODE==3)); then
		# nfs service
		modprobe overlay
		echo Y >/sys/module/overlay/parameters/nfs_export
		mount --bind /data                        /srv/nfs/data
		mount --bind /mnt/hd/                     /srv/nfs/hd
		mount --bind /media                       /srv/nfs/media
		# mount local backup overlays as read-write over NFS
		# music
		cd /srv/nfs/hd/media/dlna
		mount music/sfs/music-*.sfs music/sfs && mount -t overlay -o upperdir=music/rw,lowerdir=music/sfs,workdir=music/work -o comment=Music -o nfs_export=on -o index=on -o redirect_dir=nofollow overlay music
		cd -
		# local fs binds
		mount --bind /srv/nfs/hd/media/dlna/music /mnt/hd/media/dlna/music
		systemctl start nfs-server
		# start media services
		systemctl start minidlna
		systemctl start transmission || sudo -u transmission /usr/bin/transmission-daemon -e /dev/null --log-error &> /dev/null &
		# set service priorities
		sleep 5
		chrt -rr -p 99 `pgrep minidlnad`               # minidlna will have the greater (realtime) priority
		chrt -i -p 0 `pgrep transmission-daemon`       # transmission has the lowest (idle) priority
	fi

fi # server-only shananigans



if ((DESKTOP_MODE>0)); then
	# nfs client, if we're @ home
	mount -t nfs -o noatime,nolock 192.168.1.5:/srv/nfs                     /mnt/nfs
	mount -t nfs -o noatime,nolock 192.168.1.5:/srv/nfs/hd/media/dlna/music /mnt/nfs/hd/media/dlna/music
	ls -l /mnt/nfs/{,data,media,mutuatech,hd,hd/media/dlna/music}            # making the first access here prevents udev from starting later
fi

if ((DESKTOP_MODE==0)); then
	# if there is no console, start the interface
	if pgrep tty || pgrep logind; then
		echo "Not starting any framebuffer applications or else you wouldn't be able to login via console -- if you want FB, do systemctl disable getty\\@tty1; systemctl disable systemctl-logind"
	else
		HOME=/root USER=root LOGNAME=root exec /root/bin/StartGUI
	fi
fi

if ((DESKTOP_MODE>=2)); then
	systemctl start sddm
	systemctl start cups
fi

echo "### `date`: 'PostBoot' script ENDED"
