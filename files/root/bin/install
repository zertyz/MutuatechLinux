#! /bin/bash


# build a UEFI, SFS and writable usb stick Linux System based on the actual system


# usage: sudo buildSFSPen [/dev/sdX] {UEFI|MBR -- the default being UEFI initialization boot standard}


# or, to install a deflated system on /dev/sdb:
# dd if=/dev/zero of=/dev/sdb count=1024; fdisk /dev/sdb; mkdir /tmp/root; mount /dev/sda1 /tmp/root; mkfs.ext4 -F -b 4096 -D -E resize=$((32*(1024*1024*1024)/4096)),stride=32,stripe-width=32,packed_meta_blocks=1,discard -m 0 -O ^has_journal /dev/sdb1; tune2fs -L "MPRJWebDev" -c 3 -E mmp_update_interval=298 -e remount-ro -f -o discard,journal_data_writeback,nobarrier /dev/sdb1; mkdir /tmp/pen; mount /dev/sdb1 /tmp/pen; cd /tmp/root; date; rsync -a --info=progress2 * /tmp/pen; date; sync; date; grub-install --no-floppy --root-directory=/tmp/pen /dev/sdb; umount /tmp/pen; cd; umount /tmp/root

# after installing to the usb stick, some handcrafted work must be done to:
# 1) Remove customized configuration from /etc (definitive solution: not to copy them in the future):
# 1.1) Wifi profiles. Remove them with (netctl list; cat) | while read l; do p=`echo $l`; echo "Doing for profile '$p'"; rm /etc/netctl/"$p"; done
# 1.2) Remove printers from /etc/cups/printers.conf, /etc/printcap)
# 2) Set the pendrive to boot into fallback mode by default
# 3) Clean /root/bin/bootAutoRun

# to install it on an HD partition:
# 1) Choose the HD partition: targetDev=/dev/sdx4; targetHD=/dev/sdx;
# 2) Format it (for optimum HD performance) and name it: mkfs.ext4 -b 4096 -E resize=$((512*(1024*1024*1024)/4096)),stride=32,stripe-width=32,packed_meta_blocks=1,discard -m 0 -O flex_bg $targetDev; tune2fs -L "MutuaTechLinux" -c 3 -e remount-ro -o discard,journal_data_writeback,nobarrier $targetDev
# 3) Mount it and copy it: mkdir /tmp/hd; mount $targetDev /tmp/hd; rsync -a --info=progress2 /bin /boot /etc /home /lib /lib64 /mnt /opt /root /sbin /srv /usr /var /tmp/hd; mkdir /tmp/hd/dev /tmp/hd/proc /tmp/hd/run /tmp/hd/sys /tmp/hd/tmp
# 4) Edit /tmp/hd/etc/fstab to the correct mount points, swap, etc -- the command blkid will be useful
# 5) The same for /tmp/hd/boot/grub/grub.cfg (resume and root options, for swap and root fs, respectively)
# 6) Make it bootable: grub-install --no-floppy --boot-directory=/tmp/hd/boot $targetHD &>/dev/null &&
# 7) Boot into it in fallback mode and then run the following command to be able to boot in normal mode from now on: mkinitcpio -p linux

# gerar a imagem para o virtualbox
#--1) gerar o pen
#--2) executar VBoxManage convertfromraw /dev/sdc MutuaTechLinux.vdi
#--3) abrir o virtual box e reassociar o novo .vdi à máquina virtual (é necessário deletar o vínculo e recriá-lo)
#--4) deletar os logs e zipar o diretório inteiro com zip -9r /tmp/MutuaTechLinuxVirtualBoxVM.zip MutuaTech\ Linux/

#--Novos pacotes:
#--pacman -S  ttf-linux-libertine-g ttf-overpass ttf-ionicons ttf-gentium ttf-fira-sans ttf-fira-mono ttf-ubraille ttf-tibetan-machine ttf-junicode ttf-hack ttf-croscore ttf-arphic-ukai noto-fonts font-bh-ttf ttf-roboto
#--pacman -S seamonkey gst-plugins-base gst-plugins-bad gst-plugins-good gst-plugins-ugly
#--pacman -S midori gst-plugins-base gst-plugins-good gst-libav aria2
#--pacman -S qupzilla
#--pacman -S jadx
#--pacman -S i7z
#----> fora os pacotes no AUR



penDev=$1
initializationModel="${2:-UEFI}"
bootPartSize="30M"  # the size of the boot partition, when using UEFI initialization boot standard. To infer it, do a du -k /boot
sfsPartSize="7080M" # the size the partition must have to hold the .sfs generated file
                    # You may set it to ~1/3 of the used space reported by "df -m"
liveUser="mprj"     # the default username for the newly generated system

function cleanup {
  umount boot
  umount rw
  umount root/*
  rmdir boot
  rmdir rw
  rm -f root/*
  rmdir root/*
  rmdir root
}


function failure {
  echo " ** FAILED"
  cleanup
  exit 1
}


echo -en "Pendrive Partitioning:\n"
  echo -en "  Creating..."
    dd if=/dev/zero of=$penDev bs=512 count=2 &>/dev/null &&
    dd if=/dev/zero of=$penDev bs=512 count=2 seek=$((`blockdev --getsz $penDev`-2)) &>/dev/null &&
    echo " OK" || failure
  echo -en "  Partitioning with 128k alignment for ${initializationModel} boot..."
    if [ "$initializationModel" == "UEFI" ]; then
      echo -en "x\nl\n1\nm\nn\n1\n34\n+${bootPartSize}\nEF00\nn\n2\n\n+${sfsPartSize}\n8300\nx\nl\n256\nm\nn\n3\n\n\n8300\nw\nY\n" | gdisk $penDev &>/dev/null &&
      echo " OK" || failure
    echo -en "  Creating the UEFI Boot fs..."
      mkfs.vfat ${penDev}1 &>/dev/null &&
      echo " OK" || failure
    else
      # create the partition scheme, respecting the rule: part#2 is for SFS, part#3 is for RW, which should be marked as bootable -- when using MBR scheme, part#1 is not used
      echo -en "n\np\n2\n\n+${sfsPartSize}\nx\nb\n256\nr\nn\np\n3\n\n\na\n3\nw\n" | fdisk $penDev &>/dev/null &&
      echo " OK" || failure
    fi
  echo -en "  Syncing..."
    sync && echo " OK" || failure
  echo -en "  Creating the RW file system optimized for flash media..."
    #mkfs.ext4 -F -b 4096 -C $((128*1024)) -D -E resize=$((32*(1024*1024*1024)/4096)),stride=32,stripe-width=32,packed_meta_blocks=1,discard,mmp_update_interval=296 -i $((128*1024)) -m 0 -O extent,bigalloc,^has_journal ${penDev}3 &>/dev/null &&
    mkfs.ext4 -b 4096 -E resize=$((32*(1024*1024*1024)/4096)),stride=32,stripe-width=32,packed_meta_blocks=1,discard -m 0 -O flex_bg ${penDev}3 &>/dev/null &&
    tune2fs -L "ReWri" -c 3 -e remount-ro -o discard,journal_data_writeback,nobarrier ${penDev}3 &>/dev/null &&
    echo " OK" || failure


echo -en "Pendrive Contents:\n"
  echo -en "  Making the mount environment..."
    cd /tmp &&
    mkdir -p root boot rw &&
    echo " OK" || failure
  echo -en "  Mounting partitions:\n"
    echo -en "    rw..."
      mount ${penDev}3 rw &&
      echo " OK" || failure
    echo -en "    boot..."
    if [ "$initializationModel" == "UEFI" ]; then
        mount ${penDev}1 boot &&
        echo " OK" || failure
    else
        mkdir rw/boot &&
        mount --bind rw/boot boot &&
        echo " OK" || failure
    fi
  echo -en "  Cloning boot:\n"
    #rsync -a --info=progress2 --exclude "*fallback*" /boot/* boot &&
    rsync -a --info=progress2 /boot/* boot &&
    echo "" || failure
  echo -en "  Cloning rw:\n"
  # ainda falta fazer coisas como:
  # 1) Dar uma passada em /etc e não copiar arquivos como as infos de rede (etc/netctl), as impressoras (etc/cups/printers.conf, etc/printcap)
  # 2) Remover o 'enable' dos módulos do systemctl relativos a dispositivos de rede (dhcp, ativação de placas de redes móveis, etc) -- o comando 'netctl list' pode ajudar
  # 3) Configurar o boot do pendrive pra sempre entrar no modo fallback (carregando todos os drivers) e o resume? Teria que ser um dispositivo minimo, do próprio pen...
  # 5) Clarear o arquivo /root/bin/bootAutoRun
  # 6) Ajustar o tamanho da partição e do FS durante o primeiro boot
    rsync -a --info=progress2                                                            \
             --exclude "log/*/*"                                                         \
             --exclude "log/journal/*"                                                   \
             --exclude "log/pacman.log*"                                                 \
             --exclude "log/lastlog*"                                                    \
             --exclude "log/wtmp*"                                                       \
             --exclude "log/Xorg.*"                                                      \
             --exclude "cache/*/*"                                                       \
             --exclude "cache/pkgfile/*"                                                 \
             --exclude "cache/pacman/pkg/*"                                              \
             --exclude "lib/systemd/coredump/*"                                          \
             --exclude "lib/mlocate/*"                                                   \
             --exclude "lib/pacman/sync/*"                                               \
             --exclude "spool/cups/*"                                                    \
             --exclude "udev/data/*"                                                     \
             --exclude "user/*"                                                          \
          /etc /var /run rw &&
    rsync -a --info=progress2                                                    \
             --exclude ".Genymobile/Genymotion/deployed"                         \
             --exclude ".Genymobile/Genymotion/ova"                              \
             --exclude ".Genymobile/Genymotion/cache"                            \
             --exclude ".Genymobile/Genymotion/cache"                            \
             --exclude "android-sdk/system-images/*"                             \
             --exclude "pentaho-server/tomcat/logs/*"                            \
             --exclude "pentaho-server/tomcat/temp/*"                            \
             --exclude "pentaho-server/tomcat/work/*"                            \
             --exclude ".electron/*"                                             \
             --exclude ".gradle/*"                                               \
             --exclude ".npm/*"                                                  \
             --exclude ".node-gyp/*"                                             \
             --exclude ".m2/*"                                                   \
          /home/common /home/new_user rw/home &&
    for d in /media /mnt/*; do
      mkdir -p rw${d}
    done &&
    chmod 777 rw/media &&
    # preserve configuration
    mkdir                               rw/root             &&
    cp -a /root/.bash_profile /root/bin rw/root             &&
    chown -fR root.users                rw/root             &&
    chmod 750                           rw/root rw/root/bin &&
    cp -a /home/new_user                rw/home/${liveUser} &&
    chown -fR ${liveUser}.users         rw/home/${liveUser} &&
    chmod 700                           rw/home/${liveUser} &&
    echo "" || failure


echo -en "Configuring root files:\n"
  sfsPARTUUID="PARTUUID=`blkid ${penDev}2 | sed 's|.* PARTUUID="\([^"]*\)".*|\1|'`" || sfsPARTUUID="/dev/sdb2"
  rwUUID=`blkid ${penDev}3 | sed 's|.* UUID="\([^"]*\)".*|\1|'`
  echo -en "  /etc/fstab..."
    if [ "$initializationModel" == "UEFI" ]; then
      bootUUID=`blkid ${penDev}1 | sed 's|.* UUID="\([^"]*\)".*|\1|'` &&
      echo "UUID=$rwUUID    /ReWri    ext4    rw,relatime,data=ordered  0 1" >rw/etc/fstab &&
      echo "UUID=$bootUUID  /boot   vfat    rw,relatime     0 1" >>rw/etc/fstab &&
      for entry in etc var run home root mnt media; do
        echo "/ReWri/${entry} /${entry}        none    bind" >>rw/etc/fstab
      done &&
      echo " OK" || failure
    else
      if true; then                                                                                   # mount SFS as rootfs scheme
        echo "UUID=$rwUUID    /ReWri    ext4    rw,relatime  0 1" >rw/etc/fstab &&
        for entry in boot etc var run home root mnt media; do
          echo "/ReWri/${entry} /${entry}        none    bind" >>rw/etc/fstab
        done &&
        echo " OK" || failure
      else                                                                                            # mount RW as rootfs scheme -- missing, at least, /sbin/init
        echo "UUID=$rwUUID    /       ext4        rw,relatime  0 1" >rw/etc/fstab &&
        echo "$sfsPARTUUID    /sfs    squashfs    defaults     0 0" >>rw/etc/fstab &&
        for entry in opt usr; do
          echo "/sfs/${entry} /${entry}        none    bind" >>rw/etc/fstab
        done &&
        echo " OK" || failure
        echo -en "    Creating additional RW directories and links for mounting RW as root scheme..."
        for additionalRWDir in sfs dev opt proc srv sys tmp usr; do
          mkdir rw/$additionalRWDir
        done &&
        for additionalLibLinks in lib lib64; do
          ln -s /usr/lib rw/$additionalLibLinks
        done &&
        for additionalBinLinks in sbin bin; do
          ln -s /usr/bin rw/$additionalBinLinks
        done &&
        echo " OK" || failure
      fi
    fi

  echo -en "  Service configuration..."
    # remove netctl entries and services
    rm -f rw/etc/netctl/* &>/dev/null
    rm -f rw/etc/systemd/system/netctl@* &&
    rm -f rw/etc/systemd/system/multi-user.target.wants/netctl@* &&
    # enable mounting /tmp using memory (tmpfs), in case it has been disabled with 'systemctl mask tmp.mount'
    rm -f rw/etc/systemd/system/tmp.mount &&
    # remove staling network interface files
    rm -f rw/run/{network,wpa_supplicant,resolvconf/*}/* &&
    rm -f rw/var/lib/dhcpcd/* &&
  echo " OK" || failure

  echo -en "  Preparing the new root..."
    for file in bin lib lib64 sbin; do
        cp -a "/${file}" root
    done &&
    echo -en "." &&


    for emptyDir in boot dev home media mnt proc ReWri root run srv sys tmp var; do
      mkdir "root/${emptyDir}"
    done &&
    chmod 1777 root/tmp &&
    echo -en "." &&


    for bindDir in opt usr; do
      mkdir "root/${bindDir}" &&
      mount --bind "/${bindDir}" "root/${bindDir}"
    done &&
    mkdir root/etc &&
    mount --bind rw/etc root/etc &&
    echo " OK" || failure
      
echo -en "Configuring ${initializationModel} boot:\n"
  if [ "$initializationModel" == "UEFI" ]; then
    echo -en "  boot/loader/entries/penLinux.conf..."
      mkdir -p boot/loader/entries/ &&
      echo -en "title penLinux\nlinux /vmlinuz-linux\ninitrd  /initramfs-linux-fallback.img\noptions  root=$sfsPARTUUID ro\n" >boot/loader/entries/penLinux.conf &&
      echo " OK" || failure
    echo -en "  boot/loader/loader.conf..."
      echo -en "timeout 4\ndefault penLinux\n" >boot/loader/loader.conf
      echo " OK" || failure
  else
#    echo -en "  Syncing..."
#      sync && echo " OK" || failure
    echo -en "  Installing MBR Grub 2..."
      hostRootUUID=`grep "'gnulinux-simple-" boot/grub/grub.cfg | head -n 1 | sed "s|.*'gnulinux-simple-\([^']*\)' {.*|\1|"`
      sed -ie "s|$hostRootUUID|${rwUUID}|g" boot/grub/grub.cfg &&
      sed -ie "s|\(/boot/vmlinuz-linux .*root=\)[^ ]*|\1${sfsPARTUUID}|g" boot/grub/grub.cfg &&    # mount SFS as rootfs scheme
      #sed -ie "s|\(/boot/vmlinuz-linux .*root=\)[^ ]*|\1UUID=${rwUUID}|g" boot/grub/grub.cfg &&     # mount RW as rootfs scheme
      sed -ie 's|set default="0"|set default="1"|' boot/grub/grub.cfg &&                           # boot, by default, in the "fallback" ram image
      grub-install --no-floppy --boot-directory=rw/boot "$penDev" &>/dev/null &&
      rm -f rw/boot/initramfs-linux.img &&                                                         # remove this unneeded initramfs boot image
      echo " OK" || failure
  fi

echo -en "Zeroing pendrive contents to reduce download size:\n"
  echo -en "  SFS:\n"
  dd if=/dev/zero of=${penDev}2 bs=$((128*1024)) oflag=sync,nonblock status=progress seek=$(( (`blockdev --getsz ${penDev}2`-(1024*1024)) * 512 / (128*1024) )) && failure
  echo " --> last partition's 512M zeroed OK"
  echo -en "  RW:"
  dd if=/dev/zero of=rw/fill bs=$((128*1024)) oflag=nonblock status=progress && failure
  rm rw/fill &&
  echo " --> free space zeroed OK" || failure

echo -en "SFS root:\n"
#echo "in debug mode. press CTRL-D to squashfs it..."; read
  mksquashfs root ${penDev}2 -no-exports -always-use-fragments -nopad -noappend -no-recovery -progress -mem 2G -comp xz -b 1024k -Xbcj ia64 -Xdict-size 1024k
  # in case you prefer to save it to a file, you can later copy it to a pendrive with dd if=/tmp/sfs.sfs of=/dev/sdX2 bs=$((1024*1024)) status=progress conv=nocreat,notrunc iflag=fullblock,nonblock,noatime,nocache oflag=sync,nonblock,noatime

echo -en "Generating Installation Info:\n"
  mkdir -p /tmp/sfs &&
  mount ${penDev}2 /tmp/sfs &&
  cd /tmp/sfs &&
  find | xz -9eev >/tmp/rw/mutuatech.linux.installed.files.xz &&
  cd - &&
  umount /tmp/sfs &&
  rmdir /tmp/sfs &&
  echo "The list of installed files was generated correctly" || failure

echo -en "Flushing & Cleaning up..."
  sync && cleanup &>/dev/null && echo " OK" || failure
